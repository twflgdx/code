int is_prime(int n)
{
	int j=0;
	for(j=2;j<n;j++)
	{
		if(n%j==0)
			return 0;
	}
	return 1;
}
int main()
{
	int i=0;
	scanf("%d",&i);
	if(is_prime(i)==1)
		printf("%d是素数",i);
	else
		printf("%d不是素数",i);
	return 0;
}

//写一个函数判断一年是不是闰年
int is_leap_year(int y)
{
	if(y%4==0&y%100!=0)
		return 1;
	else if(y%400==0)
		return 1;
	else
		return 0;
}
int is_leap_year(int y)
{
	if(y%4==0&y%100!=0||y%400==0)
		return 1;
	else
		return 0;
}
int main()
{
	int year;
	int n;
	int count=0;
	scanf("%d",&n);
	printf("1000到%d的闰年有：\n",n);
	for(year=1000;year<=n;year++)
	{
		if(is_leap_year(year)==1)
		{
			printf("%d ",year);
			count++;
		}
	}
	printf("\n一共%d个",count);
	return 0;
}
/*//写一个函数，实现一个整形有序数组的二分查找。
                 //本质上arr是一个指针，而用sizeof的话win32结果就是4，64位的结果就是8
int binary_search(int arr[], int k,int sz)
{
	//int sz=sizeof(arr)/sizeof(arr[0]); 4/4=1。错
	int left=0;
	int right=sz;
	while(left<=right)
	{
		int mid=(left+right)/2;
		if(k>arr[mid])
			left=mid+1;
		else if(k<arr[mid])
			right=mid-1;
		else
			return mid;
	}
	return -1;
}
int main()
{
	int arr[]={1,2,3,4,5,6,7,8,9,10};
	int k=3;
	int sz=sizeof(arr)/sizeof(arr[0]); //不能在函数中用sizeof求元素个数 
	int ret=binary_search(arr,k,sz);//arr传递过去的是首元素地址
	if(ret==-1)
	{
		printf("找不到指定的数字\n");
	}
	else
	{
		printf("找到了，下标是：%d\n",ret);
	}
	return 0;
}*/

/*//写一个函数，每调用一次这个函数，就会将num的值增加1。
void Add(int* p)
{
	*p++;
}
int main()
{
	int num=0;
	Add(&num);
	printf("%d",num);//1
	Add(&num);
	printf("%d",num);//2
	Add(&num);
	printf("%d",num);//3
	return 0;
}//错了，结果为0 0 0
void Add(int* p)
{
	(*p)++;//++的优先级高
}
int main()
{
	int num=0;
	Add(&num);
	printf("%d ",num);//1
	Add(&num);
	printf("%d ",num);//2
	Add(&num);
	printf("%d ",num);//3
	return 0;
}*/
